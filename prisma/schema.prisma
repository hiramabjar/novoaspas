// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  engineType      = "dataproxy"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  password       String?
  role           String    @default("student")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  accounts        Account[]
  sessions       Session[]
  studentProfile StudentProfile?
  exerciseAttempts ExerciseAttempt[]
  exerciseProgress ExerciseProgress[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Exercise {
  id          String    @id @default(cuid())
  title       String
  description String
  content     String
  type        String    @default("reading")
  audioUrl    String?
  voiceId     String?
  languageId  String
  levelId     String
  moduleId    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  questions Question[]
  module    Module?    @relation(fields: [moduleId], references: [id])
  language  Language   @relation(fields: [languageId], references: [id])
  level     Level     @relation(fields: [levelId], references: [id])
  attempts  ExerciseAttempt[]
  progress  ExerciseProgress[]
}

model Question {
  id            String   @id @default(cuid())
  exerciseId    String
  question      String
  options       String
  correctAnswer String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  exercise Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
}

model Module {
  id          String   @id @default(cuid())
  name        String
  description String
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  exercises   Exercise[]
}

model Language {
  id          String     @id @default(cuid())
  name        String
  code        String     @unique
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  exercises   Exercise[]
  enrollments Enrollment[]
}

model Level {
  id          String   @id @default(cuid())
  name        String
  code        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  exercises   Exercise[]
  enrollments Enrollment[]
}

model StudentProfile {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  enrollments Enrollment[]
}

model ExerciseAttempt {
  id                 String   @id @default(cuid())
  userId             String
  exerciseId         String
  score              Int      @default(0)
  status             String   @default("PENDING") // PENDING, COMPLETED, FAILED
  timeSpentInSeconds Int      @default(0)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  exercise Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([exerciseId])
}

model ExerciseProgress {
  id          String   @id @default(cuid())
  exerciseId  String
  userId      String
  status      String   @default("started")
  score       Int?
  startedAt   DateTime @default(now())
  finishedAt  DateTime?
  attempts    Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  exercise    Exercise @relation(fields: [exerciseId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@unique([userId, exerciseId])
}

model Enrollment {
  id              String   @id @default(cuid())
  studentProfileId String
  languageId      String
  levelId         String
  status          String   @default("active")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  studentProfile  StudentProfile @relation(fields: [studentProfileId], references: [id])
  language        Language @relation(fields: [languageId], references: [id])
  level           Level    @relation(fields: [levelId], references: [id])
} 